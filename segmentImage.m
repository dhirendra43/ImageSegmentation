function [BW,maskedImage] = segmentImage(RGB)
%segmentImage Segment image using auto-generated code from imageSegmenter app
%  [BW,MASKEDIMAGE] = segmentImage(RGB) segments image RGB using
%  auto-generated code from the imageSegmenter app. The final segmentation
%  is returned in BW, and a masked image is returned in MASKEDIMAGE.

% Auto-generated by imageSegmenter app on 17-Sep-2020
%----------------------------------------------------


% Convert RGB image into L*a*b* color space.
X = rgb2lab(RGB);

% Graph cut
foregroundInd
backgroundInd = [97 101 203 239 254 256 258 444 455 474 476 478 480 482 484 485 487 489 493 495 500 504 512 516 1058 1069 1075 1082 1086 1092 1201 1252 1442 1521 3190 3192 3197 3235 3239 3244 3246 3248 3250 3254 3438 3529 3531 5186 5227 5261 5269 5435 5438 5465 5534 5538 7035 7180 7222 7433 7435 7544 7548 7551 9175 9209 9212 9216 9224 9226 9229 9237 9276 9282 9288 9290 9295 9433 9557 11173 11216 11222 11297 11301 11303 11308 11312 11314 11429 11431 11561 13171 13318 13323 13327 13331 13333 13427 15065 15069 15071 15077 15082 15167 15337 15340 15346 15352 15357 15363 15365 15369 15372 15425 15576 16163 16203 16382 16386 16388 16418 16420 16421 16425 16581 18092 18162 18197 18199 18201 18391 18414 18416 18587 20060 20162 20393 20397 20399 20403 20404 20408 20410 20979 20981 22101 22595 22602 22608 22983 24107 24156 24617 26054 26630 26960 26964 26971 28111 28642 28951 30152 30655 32118 32122 32133 32150 32197 32199 32672 32681 33139 33937 33986 35050 35143 35146 35195 35704 35717 35917 37050 37195 37734 37745 37753 37762 37772 37787 37798 39160 39817 39839 39855 39871 39881 39898 41990 43977 43979 43983 43984 43990 45050 45137 47050 47969 48133 48195 48992 52184 52207 54130 54184 54992 56056 56220 58222 58958 58994 60178 60994 62124 62218 64990 64996 65122 65222 65226 67082 67171 67951 69111 69169 69994 71114 71116 71145 71146 71158 71160 71186 73990 75182 75984 77998 79949 79966 80111 80988 82109 82949 90990 92101 92949 94097 96969 97105 97949 99097 101082 103096 105952 107092 107968 111956 112090 112958 112960 112966 112968 112990 118968 120968 122086 126990 128971 128990 129990 131082 131973 133992 135992 137079 137977 137992 143077 145996 146979 148077 148979 150979 152979 152996 158073 163071 165998 177069 188064 197062 205060 212058 220056 227056 235054 241052 248050 249000 253000 258998 259049 261998 267047 269996 271996 276994 282045 286994 290043 290994 291994 293992 295992 299992 301039 301992 303992 305992 308037 308992 316037 316992 318992 322992 323033 327992 329992 331992 333032 337992 338992 342032 342992 344992 346992 348992 350992 352032 355992 363992 367992 369030 372030 372994 376996 378030 384030 387030 391030 392000 401030 410030 421030 435030 444030 450030 453030 461030 463030 468030 474030 476030 480030 485030 489030 495030 500030 504030 506030 512030 517030 521030 523030 525030 527030 529030 534032 536032 542033 548033 553035 557035 559035 559998 568035 572992 574037 580039 583039 585990 587041 593041 596990 598041 600041 602041 604041 604988 608041 608986 610984 612041 612984 615041 615984 617983 621041 621983 625041 627983 630041 634041 640983 642041 645041 649041 653041 653983 655043 659043 661043 661983 666045 672047 676047 677983 687052 687983 689052 693054 700056 700981 702058 704060 706060 708062 709981 717064 719981 721065 738981 747979 751073 758979 760977 766977 772973 775973 783971 787073 789969 802073 802964 807177 807180 811139 811194 811195 811962 815124 817118 819960 821073 821207 824105 826958 836099 836218 839073 841073 841220 843954 851082 851084 853075 853081 853952 854092 854220 856073 858073 858220 860067 862090 862952 866060 866088 870945 870951 870954 870958 870960 870962 870966 870968 870975 871056 871073 871220 873981 875930 877917 881073 881983 883054 883216 883952 885900 888073 888983 890875 890983 894077 894951 896983 898060 898207 898949 900077 900860 900949 903205 903947 903983 905060 905079 905855 905947 909082 909947 911849 913084 913197 913947 915062 915084 917088 917947 919090 920841 922094 924069 924096 924180 924945 926077 926175 926858 928090 928945 930099 930109 930130 930139 930841 930945 932943 934105 934828 934830 934836 934841 934847 934849 934855 934943 934964 935817 935841 935860 935943 937107 937866 937941 937943 939871 939883 939894 939913 939919 939932 939939 941111 941806 943113 943841 945116 945118 945858 947120 947787 949952 951124 951130 951841 952133 954762 956135 956858 958146 958150 958742 958841 960941 962738 962858 964160 964165 966171 966730 966843 967175 967843 969178 969182 969188 969192 969197 969201 969726 969843 973207 973721 973839 973862 975218 975227 975928 977717 977864 981241 981244 983254 983870 984263 986273 986704 988284 988290 988702 988873 988913 990875 992297 992305 992308 992696 992896 994314 994316 994320 994323 994325 994329 994331 994333 994335 994339 994340 994342 994348 994350 994354 994355 994359 994363 994365 994369 994371 994374 994376 994380 994382 994386 994391 994397 994403 994404 994410 994420 994421 994425 994427 994431 994433 994440 994442 994446 994448 994452 994453 994459 994465 994472 994484 994489 994497 994506 994510 994516 994517 994523 994529 994531 994534 994540 994546 994548 994551 994553 994559 994563 994570 994574 994580 994581 994587 994591 994593 994597 994598 994602 996604 996689 996885 996888 996890 998608 998613 998615 998621 ];
L = superpixels(X,5100,'IsInputLab',true);

% Convert L*a*b* range to [0 1]
scaledX = prepLab(X);
BW = lazysnapping(scaledX,L,foregroundInd,backgroundInd);

% Create masked image.
maskedImage = RGB;
maskedImage(repmat(~BW,[1 1 3])) = 0;
end

function out = prepLab(in)

% Convert L*a*b* image to range [0,1]
out = in;
out(:,:,1) = in(:,:,1) / 100;  % L range is [0 100].
out(:,:,2) = (in(:,:,2) + 86.1827) / 184.4170;  % a* range is [-86.1827,98.2343].
out(:,:,3) = (in(:,:,3) + 107.8602) / 202.3382;  % b* range is [-107.8602,94.4780].

end
